// <auto-generated />
using System;
using CSharp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CSharp.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    [Migration("20201223124604_Content-Blog-Article-Suggest-Problem")]
    partial class ContentBlogArticleSuggestProblem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("CSharp.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PublishTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorName");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("CSharp.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("HasVerify")
                        .HasColumnType("bit");

                    b.Property<string>("Site")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("CSharp.Major", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("CSharp.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasRead")
                        .HasColumnType("bit");

                    b.Property<int>("MessageStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CSharp.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("BeForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasCheckConstraint("CK_Age", "Age Between 0 AND 150 ");
                });

            modelBuilder.Entity("CSharp.Summary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Summary");
                });

            modelBuilder.Entity("CSharp.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("CSharp.User", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("UserName");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmailId")
                        .HasColumnType("int");

                    b.Property<int?>("HelpBean")
                        .HasColumnType("int");

                    b.Property<int?>("HelpMoney")
                        .HasColumnType("int");

                    b.Property<int?>("HelpPoint")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.HasIndex("CreateTime")
                        .IsUnique();

                    b.HasIndex("EmailId")
                        .IsUnique()
                        .HasFilter("[EmailId] IS NOT NULL");

                    b.ToTable("Register");

                    b.HasCheckConstraint("CK_Register_CreateTime", "CreateTime >'2000-1-1'");
                });

            modelBuilder.Entity("CSharp.Article", b =>
                {
                    b.HasBaseType("CSharp.Content");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("targetId")
                        .HasColumnType("int");

                    b.HasIndex("targetId");

                    b.ToTable("ArticleS");
                });

            modelBuilder.Entity("CSharp.Blog", b =>
                {
                    b.HasBaseType("CSharp.Content");

                    b.Property<string>("Sites")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("CSharp.Problem", b =>
                {
                    b.HasBaseType("CSharp.Content");

                    b.Property<int>("ProblemStatus")
                        .HasColumnType("int");

                    b.Property<int?>("Reward")
                        .HasColumnType("int");

                    b.Property<int?>("SummaryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("SummaryId");

                    b.ToTable("Porblem");
                });

            modelBuilder.Entity("CSharp.Suggest", b =>
                {
                    b.HasBaseType("CSharp.Content");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Suggests");
                });

            modelBuilder.Entity("CSharp.Content", b =>
                {
                    b.HasOne("CSharp.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorName");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CSharp.User", b =>
                {
                    b.HasOne("CSharp.Email", "Email")
                        .WithOne()
                        .HasForeignKey("CSharp.User", "EmailId");

                    b.Navigation("Email");
                });

            modelBuilder.Entity("CSharp.Article", b =>
                {
                    b.HasOne("CSharp.Content", null)
                        .WithOne()
                        .HasForeignKey("CSharp.Article", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CSharp.Article", "target")
                        .WithMany()
                        .HasForeignKey("targetId");

                    b.Navigation("target");
                });

            modelBuilder.Entity("CSharp.Blog", b =>
                {
                    b.HasOne("CSharp.Content", null)
                        .WithOne()
                        .HasForeignKey("CSharp.Blog", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CSharp.Problem", b =>
                {
                    b.HasOne("CSharp.Content", null)
                        .WithOne()
                        .HasForeignKey("CSharp.Problem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CSharp.Summary", "Summary")
                        .WithMany()
                        .HasForeignKey("SummaryId");

                    b.Navigation("Summary");
                });

            modelBuilder.Entity("CSharp.Suggest", b =>
                {
                    b.HasOne("CSharp.Content", null)
                        .WithOne()
                        .HasForeignKey("CSharp.Suggest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
